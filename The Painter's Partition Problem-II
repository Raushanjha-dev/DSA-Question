Given an array arr[] where each element denotes the length of a board, and an integer k representing the number of painters available. Each painter takes 1 unit of time to paint 1 unit length of a board.

Determine the minimum amount of time required to paint all the boards, under the constraint that each painter can paint only a contiguous sequence of boards (no skipping or splitting allowed).


//code
bool check(vector<int>&arr,int mid,int k){
        int p=1;
        int sum=0;
        for(int i=0;i<arr.size();i++){
            sum+=arr[i];
            if(sum>mid){
                p++;
                sum=arr[i];
            }
        }
        if(p<=k){
            return true;
        }else{
            return false;
        }
    }
  
  
  
    int minTime(vector<int>& arr, int k) {
        // code here
        auto it =max_element(arr.begin(),arr.end());
        int l=*it;
        int sum=0;
        int ans;
        for(int i=0;i<arr.size();i++){
            sum+=arr[i];
            
        }
        int h=sum;
        while(l<=h){
            int mid=(l+h)/2;
            if(check(arr,mid,k)){
                ans=mid;
                h=mid-1;
            }else{
                l=mid+1;
            }
        }
        return ans;
        
    }
